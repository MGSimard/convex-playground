---
description: Guidelines and best practices for building Convex projects, including database schema design, queries, mutations, and real-world examples
globs: **/*.{ts,tsx,js,jsx}
---

# Convex + TanStack Query Guidelines

https://docs.convex.dev/client/tanstack-query

This codebase is based around:

- Vite
- TanStack Router
- TanStack Query
- Convex

This inherently means that we have a custom integration of TanStack Query with Convex (See src/main.tsx)

## Queries

A live-updating subscription to a Convex query is as simple as calling TanStack useQuery with convexQuery:

```typescript
import { useQuery } from "@tanstack/react-query";
import { convexQuery } from "@convex-dev/react-query";
import { api } from "../convex/_generated/api";

export function App() {
  const { data, isPending, error } = useQuery(convexQuery(api.functions.myQuery, { id: 123 }));
  return isPending ? "Loading..." : data;
}
```

You can spread the object returned by convexQuery into an object specifying additional arguments of useQuery.

```typescript
const { data, isPending, error } = useQuery({
  ...convexQuery(api.functions.myQuery, { id: 123 }),
  initialData: [], // use an empty list if no data is available yet
  gcTime: 10000, // stay subscribed for 10 seconds after this component unmounts
});
```

## Mutations

Your app can call Convex mutations by using the TanStack useMutation hook, and setting the mutationFn property to the result of calling useConvexMutation:

```typescript
import { useMutation } from "@tanstack/react-query";
import { useConvexMutation } from "@convex-dev/react-query";
import { api } from "../convex/_generated/api";

export function App() {
  const { mutate, isPending } = useMutation({
    mutationFn: useConvexMutation(api.functions.doSomething),
  });
  return <button onClick={() => mutate({a: "Hello"})}>Click me</button>;
}
```

## Differences from using fetch with TanStack Query

Convex provides stronger guarantees than other methods of fetching data with React Query, so some options and return value properties are no longer necessary.

Subscriptions to Convex queries will remain active after the last component using useQuery for a given function unmounts for gcTime milliseconds. This value is 5 minutes by default; if this results in unwanted function activity use a smaller value.

Data provided by Convex is never stale, so the isStale property of the return value of useQuery will always be false. retry-related options are ignored, since Convex provides its own retry mechanism over its WebSocket protocol. refetch-related options are similarly ignored since Convex queries are always up to date.
