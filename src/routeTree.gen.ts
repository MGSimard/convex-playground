/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SyncRouteRouteImport } from './routes/sync/route'
import { Route as OrganizationSettingsRouteRouteImport } from './routes/organization-settings/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TraceIndexRouteImport } from './routes/trace/index'
import { Route as SyncIndexRouteImport } from './routes/sync/index'
import { Route as OrganizationSettingsIndexRouteImport } from './routes/organization-settings/index'
import { Route as HiveIndexRouteImport } from './routes/hive/index'
import { Route as CortexIndexRouteImport } from './routes/cortex/index'
import { Route as OrganizationSettingsTeamRouteImport } from './routes/organization-settings/team'
import { Route as SyncBoardIdBoardNameRouteImport } from './routes/sync/$boardId.$boardName'

const SyncRouteRoute = SyncRouteRouteImport.update({
  id: '/sync',
  path: '/sync',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationSettingsRouteRoute =
  OrganizationSettingsRouteRouteImport.update({
    id: '/organization-settings',
    path: '/organization-settings',
    getParentRoute: () => rootRouteImport,
  } as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TraceIndexRoute = TraceIndexRouteImport.update({
  id: '/trace/',
  path: '/trace/',
  getParentRoute: () => rootRouteImport,
} as any)
const SyncIndexRoute = SyncIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SyncRouteRoute,
} as any)
const OrganizationSettingsIndexRoute =
  OrganizationSettingsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => OrganizationSettingsRouteRoute,
  } as any)
const HiveIndexRoute = HiveIndexRouteImport.update({
  id: '/hive/',
  path: '/hive/',
  getParentRoute: () => rootRouteImport,
} as any)
const CortexIndexRoute = CortexIndexRouteImport.update({
  id: '/cortex/',
  path: '/cortex/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationSettingsTeamRoute =
  OrganizationSettingsTeamRouteImport.update({
    id: '/team',
    path: '/team',
    getParentRoute: () => OrganizationSettingsRouteRoute,
  } as any)
const SyncBoardIdBoardNameRoute = SyncBoardIdBoardNameRouteImport.update({
  id: '/$boardId/$boardName',
  path: '/$boardId/$boardName',
  getParentRoute: () => SyncRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/organization-settings': typeof OrganizationSettingsRouteRouteWithChildren
  '/sync': typeof SyncRouteRouteWithChildren
  '/organization-settings/team': typeof OrganizationSettingsTeamRoute
  '/cortex': typeof CortexIndexRoute
  '/hive': typeof HiveIndexRoute
  '/organization-settings/': typeof OrganizationSettingsIndexRoute
  '/sync/': typeof SyncIndexRoute
  '/trace': typeof TraceIndexRoute
  '/sync/$boardId/$boardName': typeof SyncBoardIdBoardNameRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/organization-settings/team': typeof OrganizationSettingsTeamRoute
  '/cortex': typeof CortexIndexRoute
  '/hive': typeof HiveIndexRoute
  '/organization-settings': typeof OrganizationSettingsIndexRoute
  '/sync': typeof SyncIndexRoute
  '/trace': typeof TraceIndexRoute
  '/sync/$boardId/$boardName': typeof SyncBoardIdBoardNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/organization-settings': typeof OrganizationSettingsRouteRouteWithChildren
  '/sync': typeof SyncRouteRouteWithChildren
  '/organization-settings/team': typeof OrganizationSettingsTeamRoute
  '/cortex/': typeof CortexIndexRoute
  '/hive/': typeof HiveIndexRoute
  '/organization-settings/': typeof OrganizationSettingsIndexRoute
  '/sync/': typeof SyncIndexRoute
  '/trace/': typeof TraceIndexRoute
  '/sync/$boardId/$boardName': typeof SyncBoardIdBoardNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/organization-settings'
    | '/sync'
    | '/organization-settings/team'
    | '/cortex'
    | '/hive'
    | '/organization-settings/'
    | '/sync/'
    | '/trace'
    | '/sync/$boardId/$boardName'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/organization-settings/team'
    | '/cortex'
    | '/hive'
    | '/organization-settings'
    | '/sync'
    | '/trace'
    | '/sync/$boardId/$boardName'
  id:
    | '__root__'
    | '/'
    | '/organization-settings'
    | '/sync'
    | '/organization-settings/team'
    | '/cortex/'
    | '/hive/'
    | '/organization-settings/'
    | '/sync/'
    | '/trace/'
    | '/sync/$boardId/$boardName'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrganizationSettingsRouteRoute: typeof OrganizationSettingsRouteRouteWithChildren
  SyncRouteRoute: typeof SyncRouteRouteWithChildren
  CortexIndexRoute: typeof CortexIndexRoute
  HiveIndexRoute: typeof HiveIndexRoute
  TraceIndexRoute: typeof TraceIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sync': {
      id: '/sync'
      path: '/sync'
      fullPath: '/sync'
      preLoaderRoute: typeof SyncRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organization-settings': {
      id: '/organization-settings'
      path: '/organization-settings'
      fullPath: '/organization-settings'
      preLoaderRoute: typeof OrganizationSettingsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/trace/': {
      id: '/trace/'
      path: '/trace'
      fullPath: '/trace'
      preLoaderRoute: typeof TraceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sync/': {
      id: '/sync/'
      path: '/'
      fullPath: '/sync/'
      preLoaderRoute: typeof SyncIndexRouteImport
      parentRoute: typeof SyncRouteRoute
    }
    '/organization-settings/': {
      id: '/organization-settings/'
      path: '/'
      fullPath: '/organization-settings/'
      preLoaderRoute: typeof OrganizationSettingsIndexRouteImport
      parentRoute: typeof OrganizationSettingsRouteRoute
    }
    '/hive/': {
      id: '/hive/'
      path: '/hive'
      fullPath: '/hive'
      preLoaderRoute: typeof HiveIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cortex/': {
      id: '/cortex/'
      path: '/cortex'
      fullPath: '/cortex'
      preLoaderRoute: typeof CortexIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organization-settings/team': {
      id: '/organization-settings/team'
      path: '/team'
      fullPath: '/organization-settings/team'
      preLoaderRoute: typeof OrganizationSettingsTeamRouteImport
      parentRoute: typeof OrganizationSettingsRouteRoute
    }
    '/sync/$boardId/$boardName': {
      id: '/sync/$boardId/$boardName'
      path: '/$boardId/$boardName'
      fullPath: '/sync/$boardId/$boardName'
      preLoaderRoute: typeof SyncBoardIdBoardNameRouteImport
      parentRoute: typeof SyncRouteRoute
    }
  }
}

interface OrganizationSettingsRouteRouteChildren {
  OrganizationSettingsTeamRoute: typeof OrganizationSettingsTeamRoute
  OrganizationSettingsIndexRoute: typeof OrganizationSettingsIndexRoute
}

const OrganizationSettingsRouteRouteChildren: OrganizationSettingsRouteRouteChildren =
  {
    OrganizationSettingsTeamRoute: OrganizationSettingsTeamRoute,
    OrganizationSettingsIndexRoute: OrganizationSettingsIndexRoute,
  }

const OrganizationSettingsRouteRouteWithChildren =
  OrganizationSettingsRouteRoute._addFileChildren(
    OrganizationSettingsRouteRouteChildren,
  )

interface SyncRouteRouteChildren {
  SyncIndexRoute: typeof SyncIndexRoute
  SyncBoardIdBoardNameRoute: typeof SyncBoardIdBoardNameRoute
}

const SyncRouteRouteChildren: SyncRouteRouteChildren = {
  SyncIndexRoute: SyncIndexRoute,
  SyncBoardIdBoardNameRoute: SyncBoardIdBoardNameRoute,
}

const SyncRouteRouteWithChildren = SyncRouteRoute._addFileChildren(
  SyncRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrganizationSettingsRouteRoute: OrganizationSettingsRouteRouteWithChildren,
  SyncRouteRoute: SyncRouteRouteWithChildren,
  CortexIndexRoute: CortexIndexRoute,
  HiveIndexRoute: HiveIndexRoute,
  TraceIndexRoute: TraceIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
